import pandas as pd
import gspread
import datetime
import glob
import os
from datetime import timedelta
from datetime import datetime
import locale
# –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ–Ω—É –≥–æ–¥–∞ –Ω–∞ –ª–∏—Å—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è
# –∑–∞–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –Ω–∞ –≤–≤–æ–¥ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

class Metro_task():

    def __init__(self):
        pass

    def open_forming_metro(self):
        gc = gspread.oauth()
        gr = gc.open_by_url('https://docs.google.com/spreadsheets/d/1LOU86hUB7ug-y2SKX8eTuXlGuPYy89SMH6ogHFgDFeA/edit?gid=1031776011#gid=1031776011')
        current_year = datetime.today().year
        sh = gr.worksheet(f"–ì—Ä–∞—Ñ–∏–∫ –ú54 {current_year}")
        data = sh.get_all_values()
        headers = data.pop(0)
        return pd.DataFrame(data, columns=headers)
    
    def wave(self, graphic_wave, excel, info):

        date = pd.to_datetime(info['–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–±–æ—Ä–∞'], format="%d.%m.%Y")
        start =  pd.to_datetime(info['–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞'], format="%d.%m.%Y")
        # –î–æ–±–∞–≤–ª—è–µ–º 1 –¥–µ–Ω—å
        new_date = date + pd.Timedelta(days=1)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
        formatted_date = new_date.strftime("%d.%m.%Y")
        start_date = start.strftime("%d.%m")
        excel['task_start_date'] = info['–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞']
        excel['task_stop_date'] = formatted_date

        replace_dict = {
            'oif': ['',f'–ú54: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤ ({start_date}) –í—ã–≥—Ä—É–∑–∫–∞ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ 12:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏'],
            'reg': ['', f'–ú54: –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥. –°–±–æ—Ä {start_date}. –í—ã–≥—Ä—É–∑–∫–∞ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ 12:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏'],
            'siberia': ['', f'–ú54: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤ ({start_date}) –í—ã–≥—Ä—É–∑–∫–∞ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ 12:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏'],
            'chicken': ['', f'–ú54: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥. –ö—É—Ä–∏—Ü–∞. –°–±–æ—Ä {start_date}. –í—ã–≥—Ä—É–∑–∫–∞ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ 12:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏']
        }
        for key, value in replace_dict.items():
            found_items = [item for item in graphic_wave if key in item]
            replace_dict[key][0] = found_items[0]
        replace_dict['m54_zs_Regular'] = replace_dict.pop('reg')

        for key, value in replace_dict.items():
            excel.loc[excel['wave'].str.contains(key, na=False), 'wave'] = value[0]

        replace_dict['reg'] = replace_dict.pop('m54_zs_Regular')
        for key, value in replace_dict.items():
            excel.loc[excel['wave'].str.contains(key,case=False, na=False), 'subgroup1'] = value[1]
        return excel

    def task_processing(self, year, week):
        self.dir_path = r'C:/Project/Metro/task/'
        base_dir = r"C:/Project/Metro/outh/"  # –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        outh_base = os.path.join(base_dir, str(year), str(week))
        self.create_folder_week(base_dir, str(year), str(week))
        graphic = self.open_forming_metro()
        graphic = graphic[(graphic["–ù–µ–¥–µ–ª—è"]==str(week)) & (graphic['–í–æ–ª–Ω–∞'].str.contains('m54_zs_', na=False))]
        wave_array = graphic['–í–æ–ª–Ω–∞'].values  # NumPy –º–∞—Å—Å–∏–≤

        task_reg = pd.read_excel(self.dir_path + 'task_metro.xlsx')
        task_chiken = pd.read_excel(self.dir_path + 'task_chiken.xlsx')
        task = pd.concat([task_reg, task_chiken], ignore_index=True)

        task = self.wave(wave_array, task, graphic.iloc[1])

        task['monitoring_type'] = 'old'

        task.to_excel(f'{outh_base}/task.xlsx', index =False)

        # üîπ –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ø–∏—Å–æ–∫ –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π
        task['article_count'] = task['active_article_ids'].str.split(',').apply(len)

        # üîπ –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ geo_object_id –∏ —Å—É–º–º–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π
        result_geo = task.groupby('geo_object_id')['article_count'].sum().reset_index()
        result_geo.to_excel(f'{outh_base}/result_geo.xlsx', index =False)
        result_wave = task.groupby('wave')['article_count'].sum().reset_index()
        # # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        # print(result_geo)
        mess = result_wave.apply(lambda x: f"{x['wave']} - {x['article_count']}", axis=1)
        self.open_statistic_metro(result_geo, graphic.iloc[1],outh_base)
        return mess

    def create_folder_week(self, get_base_dir, year, week):
 
        outh_base = os.path.join(get_base_dir, str(year), str(week))

        folders = [
            outh_base
        ]

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
        for folder in folders:
            if not os.path.exists(folder):
                os.makedirs(folder, exist_ok=True)
                print(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder}")
            else:
                print(f"–ü–∞–ø–∫–∞ '{folder}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")  

    
    def open_statistic_metro(self, result_geo, info, path):
        date = pd.to_datetime(info['–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞'], format="%d.%m.%Y")

# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω–æ–º –≤–∏–¥–µ
        formatted_date = date.strftime("%#d.%m")  
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
        locale.setlocale(locale.LC_TIME, 'Russian') # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å
        month_name_russian = date.strftime("%B").lower()
        gc = gspread.oauth()
        gr = gc.open_by_url('https://docs.google.com/spreadsheets/d/1wBvrUs5qgrTrq2kNLOSxsrYLN7czbg3IrO0dBwBwIWY/edit?gid=0#gid=0')
        sh = gr.worksheet(f"–ê–ü {month_name_russian}")
        data = sh.get_all_values()
        headers = data.pop(0)
        df = pd.DataFrame(data, columns=headers)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        df.to_excel(f'{path}/M54_pole.xlsx', index =False)
        df['ID —Ç–æ—á–∫–∏'] = df['ID —Ç–æ—á–∫–∏'].astype(str)
        result_geo['geo_object_id'] = result_geo['geo_object_id'].astype(str)
        df = pd.merge(df, result_geo, left_on='ID —Ç–æ—á–∫–∏', right_on='geo_object_id', how='left')
        df[f'–°–ö–£\n{formatted_date}'] = df['article_count']
        df = df.drop(['article_count'], axis = 1)
        df = df.drop(['geo_object_id'], axis = 1)
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ'
        sh.update([df.columns.values.tolist()] + df.values.tolist())
        
 
